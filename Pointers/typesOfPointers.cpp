#include<iostream>
using namespace std ;
int main()
{
    //THE WILD POINTER IS A POINTER, WHICH DOSEN'T INITIALIZE TO ANY ADDRESS.
    int *wild;
    cout<<"\nWILD POINTER WILL SHOW RANDOM ADDRESS AND RANDOM VALUE: "<<"\nADDRESS --> "<<wild<<"\nVALUE --> "<<*wild;
    
    //THE NULL POINTER IS A POINTER, WHICH DOSEN'T INITIALIZE TO ANY ADDRESS itself INITIALLY,HOWEVER WE CAN ASSIGN ADDRESS TO IT WHENEVER NEEDED
    int *nul=NULL;
    cout<<"\n\nNULL POINTER WILL SHOW A ADDRESS WHICH IS CONSTANT: "<<"\nADDRESS --> "<<nul<<"\nVALUE --> WHILE DEREFERENCEING THE NULL POINTER ,IT WILL SHOW AN ERROR .";
    
    // //THE DANGLING POINTER IS A POINTER, WHICH HAVE SOME ADDRESS INITIALLY,BUT NOW THAT ADDRESS HAVE BEEN REMOVED OR REUSED FOR OTHER PURPOSES.
    int *dangling;
    {
    int x=10;
    dangling=&x;
    }
    cout<<"\n\nDANGLING POINTER WILL ADDRESS THAT DOSEN'T EXIST IN REAL : "<<"\nADDRESS --> "<<dangling<<"\nVALUE -->WHILE DEREFERENCEING THE NULL POINTER ,IT WILL SHOW AN ERROR .";
    
    // //THE VOID POINTER IS A SPECIAL POINTER, WHICH DOSEN'T NEED TO SPECIFY THE DATATYPE OF THE VARIABLE WHOSE VALUE IS TO BE STORED.
    int abhi=116;
    float pr=116.1616;
    void *ptr=&abhi, *ptr1=&pr;

    cout<<"\n\nVOID POINTER WILL SHOW RANDOM ADDRESS AND RANDOM VALUE: "<<"\nADDRESS RELATED TO INTEGER --> "<<ptr<<"\nADDRESS RELATED TO FLOAT --> "<<ptr1;
    cout<<"\n\nHOWEVER THEY CAN'T BE DIRECTLY DEREFERENCED, SO U NEED TO TYPE CATS THAT VOID POINTER TO THAT DATATYPE.";
    int *alpha=(int *)ptr;
    float *betta=(float *)ptr1;

    cout<<"\nINTEGER VALUE --> "<<*alpha;    
    cout<<"\nFLOAT VALUE --> "<<*betta;    
    return 0;
}